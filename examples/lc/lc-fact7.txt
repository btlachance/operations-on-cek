;; #lang racket/base
;; (define pred sub1)
;; (define succ add1)
;; (define iszero zero?)
;; (define (->num n) n)

(let* ([Z (lambda (f) ((lambda (x) (f (lambda (v) ((x x) v))))
                       (lambda (x) (f (lambda (v) ((x x) v))))))]
       [add (Z (lambda (add0) (lambda (m) (lambda (n) (if (iszero m)
                                                          n
                                                          ((add0 (pred m)) (succ n)))))))]
       [mult (Z (lambda (mult0) (lambda (m) (lambda (n) (if (iszero m)
                                                            0
                                                            (if (iszero (pred m))
                                                                n
                                                                ((add n) ((mult0 (pred m)) n))))))))]
       [sub (Z (lambda (sub0) (lambda (m) (lambda (n) (if (iszero n)
                                                          m
                                                          ((sub0 (pred m)) (pred n)))))))]
       [fact (Z (lambda (fact0) (lambda (n) (if (iszero n)
                                                1
                                                ((mult n) (fact0 (pred n)))))))])
  (if (iszero ((sub (fact 7)) 5040))
      (lambda (success) success)
      (lambda (failure) failure)))
