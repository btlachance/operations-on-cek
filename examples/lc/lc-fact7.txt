(let* ([Z (lambda (f) ((lambda (x) (f (lambda (v) ((x x) v))))
                       (lambda (x) (f (lambda (v) ((x x) v))))))]
       [add (lambda (m) (lambda (n) (lambda (f) (lambda (x) ((m f) ((n f) x))))))]
       [zero (lambda (f) (lambda (x) x))]
       [one (lambda (f) (lambda (x) (f x)))]
       [two ((add one) one)]
       [three ((add two) one)]
       [four ((add three) one)]
       [five ((add four) one)]
       [mult (lambda (m) (lambda (n) (lambda (f) (lambda (x) ((n (m f)) x)))))]
       [pred (lambda (n) (lambda (f) (lambda (x) (((n (lambda (g) (lambda (h) (h (g f)))))
                                                   (lambda (u) x))
                                                  (lambda (u) u)))))]
       ;; ifzero must take thunks
       [ifzero (lambda (n) (lambda (then) (lambda (else) ((n (lambda (x) (else x))) (then else)))))]
       [fact (Z (lambda (fact0) (lambda (n) (((ifzero n) (lambda (_) one))
                                             (lambda (_) ((mult n) (fact0 (pred n))))))))])
  (fact ((add five) two)))
